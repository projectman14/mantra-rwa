/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {InstantiateMsg, ExecuteMsg, Addr, QueryMsg} from "./PaymasterFactory.types";
export interface PaymasterFactoryReadOnlyInterface {
  contractAddress: string;
  getPaymasterAddress: ({
    address
  }: {
    address: Addr;
  }) => Promise<GetPaymasterAddressResponse>;
}
export class PaymasterFactoryQueryClient implements PaymasterFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPaymasterAddress = this.getPaymasterAddress.bind(this);
  }

  getPaymasterAddress = async ({
    address
  }: {
    address: Addr;
  }): Promise<GetPaymasterAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_paymaster_address: {
        address
      }
    });
  };
}
export interface PaymasterFactoryInterface extends PaymasterFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mintPaymasterAccount: ({
    address
  }: {
    address: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PaymasterFactoryClient extends PaymasterFactoryQueryClient implements PaymasterFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintPaymasterAccount = this.mintPaymasterAccount.bind(this);
  }

  mintPaymasterAccount = async ({
    address
  }: {
    address: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_paymaster_account: {
        address
      }
    }, _fee, _memo, _funds);
  };
}