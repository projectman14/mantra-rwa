/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, QueryMsg } from "./Paymasterfactorynew.types";
export interface PaymasterfactorynewReadOnlyInterface {
  contractAddress: string;
  getPaymasterAddress: ({
    address
  }: {
    address: Addr;
  }) => Promise<GetPaymasterAddressResponse>;
}
export class PaymasterfactorynewQueryClient implements PaymasterfactorynewReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPaymasterAddress = this.getPaymasterAddress.bind(this);
  }
  getPaymasterAddress = async ({
    address
  }: {
    address: Addr;
  }): Promise<GetPaymasterAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_paymaster_address: {
        address
      }
    });
  };
}
export interface PaymasterfactorynewInterface extends PaymasterfactorynewReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mintPaymasterAccount: ({
    address
  }: {
    address: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PaymasterfactorynewClient extends PaymasterfactorynewQueryClient implements PaymasterfactorynewInterface {
  declare client: SigningCosmWasmClient;
  sender: string;
  declare contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintPaymasterAccount = this.mintPaymasterAccount.bind(this);
  }
  mintPaymasterAccount = async ({
    address
  }: {
    address: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_paymaster_account: {
        address
      }
    }, fee, memo, _funds);
  };
}