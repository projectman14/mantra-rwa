/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, Uint64, Timestamp, Uint128, QueryMsg } from "./Paymaster.types";
export interface PaymasterReadOnlyInterface {
  contractAddress: string;
  getPayments: () => Promise<GetPaymentsResponse>;
  getPaymentByID: ({
    id
  }: {
    id: Uint128;
  }) => Promise<GetPaymentByIDResponse>;
}
export class PaymasterQueryClient implements PaymasterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPayments = this.getPayments.bind(this);
    this.getPaymentByID = this.getPaymentByID.bind(this);
  }
  getPayments = async (): Promise<GetPaymentsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_payments: {}
    });
  };
  getPaymentByID = async ({
    id
  }: {
    id: Uint128;
  }): Promise<GetPaymentByIDResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_payment_by_i_d: {
        id
      }
    });
  };
}
export interface PaymasterInterface extends PaymasterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addPayment: ({
    amount,
    decimals,
    frequencyInDays,
    receiver,
    startDate,
    tokenAddress,
    tokenSymbol
  }: {
    amount: Uint64;
    decimals: number;
    frequencyInDays: number;
    receiver: Addr;
    startDate: Timestamp;
    tokenAddress: Addr;
    tokenSymbol: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removePayment: ({
    paymentId
  }: {
    paymentId: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePaymentStatus: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PaymasterClient extends PaymasterQueryClient implements PaymasterInterface {
  declare client: SigningCosmWasmClient;
  sender: string;
  declare contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addPayment = this.addPayment.bind(this);
    this.removePayment = this.removePayment.bind(this);
    this.updatePaymentStatus = this.updatePaymentStatus.bind(this);
  }
  addPayment = async ({
    amount,
    decimals,
    frequencyInDays,
    receiver,
    startDate,
    tokenAddress,
    tokenSymbol
  }: {
    amount: Uint64;
    decimals: number;
    frequencyInDays: number;
    receiver: Addr;
    startDate: Timestamp;
    tokenAddress: Addr;
    tokenSymbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_payment: {
        amount,
        decimals,
        frequency_in_days: frequencyInDays,
        receiver,
        start_date: startDate,
        token_address: tokenAddress,
        token_symbol: tokenSymbol
      }
    }, fee, memo, _funds);
  };
  removePayment = async ({
    paymentId
  }: {
    paymentId: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_payment: {
        payment_id: paymentId
      }
    }, fee, memo, _funds);
  };
  updatePaymentStatus = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_payment_status: {}
    }, fee, memo, _funds);
  };
}