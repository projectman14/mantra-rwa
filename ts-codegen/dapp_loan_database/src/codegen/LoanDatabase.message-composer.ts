/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, InstantiateMsg, ExecuteMsg, Uint64, QueryMsg, LoanInfos, LoanContract } from "./LoanDatabase.types";
export interface LoanDatabaseMsg {
  contractAddress: string;
  sender: string;
  mintLoanContract: ({
    borrowedAmount,
    borrower,
    daysBeforeExpiration,
    interest,
    tokenUri
  }: {
    borrowedAmount: Uint64;
    borrower: Addr;
    daysBeforeExpiration: number;
    interest: Uint64;
    tokenUri: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeLoanContractStatus: ({
    borrower,
    statusCode
  }: {
    borrower: Addr;
    statusCode: Uint64;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addTokenAddress: ({
    address
  }: {
    address: Addr;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeMinter: ({
    minter
  }: {
    minter: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class LoanDatabaseMsgComposer implements LoanDatabaseMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintLoanContract = this.mintLoanContract.bind(this);
    this.changeLoanContractStatus = this.changeLoanContractStatus.bind(this);
    this.addTokenAddress = this.addTokenAddress.bind(this);
    this.changeMinter = this.changeMinter.bind(this);
  }
  mintLoanContract = ({
    borrowedAmount,
    borrower,
    daysBeforeExpiration,
    interest,
    tokenUri
  }: {
    borrowedAmount: Uint64;
    borrower: Addr;
    daysBeforeExpiration: number;
    interest: Uint64;
    tokenUri: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint_loan_contract: {
            borrowed_amount: borrowedAmount,
            borrower,
            days_before_expiration: daysBeforeExpiration,
            interest,
            token_uri: tokenUri
          }
        })),
        funds: _funds
      })
    };
  };
  changeLoanContractStatus = ({
    borrower,
    statusCode
  }: {
    borrower: Addr;
    statusCode: Uint64;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_loan_contract_status: {
            borrower,
            status_code: statusCode
          }
        })),
        funds: _funds
      })
    };
  };
  addTokenAddress = ({
    address
  }: {
    address: Addr;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_token_address: {
            address
          }
        })),
        funds: _funds
      })
    };
  };
  changeMinter = ({
    minter
  }: {
    minter: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_minter: {
            minter
          }
        })),
        funds: _funds
      })
    };
  };
}